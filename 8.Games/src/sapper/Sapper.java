package sapper;

import com.javarush.engine.cell.*;

public class Sapper extends Game {
    /**
     * –†–µ–∂–∏–º—ã –∏–≥—Ä—ã.
     */
    private enum Mode {
        // –ù–æ–≤–∞—è –∏–≥—Ä–∞
        GAME_NEW,
        // –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—è.
        GAME_MENU_SIZE,
        // –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
        GAME_MENU_COMPL,
        // –û—Å–Ω–æ–≤–∞–Ω–∞—è –∏–≥—Ä–∞ - –ø–æ–∏—Å–∫ –º–∏–Ω –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.
        GAME_MAIN_FORM,
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ –≤–∑—Ä—ã–≤–∞.
        GAME_BLOCKED,
        GAME_FINAL
    }

    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã.
     */
    private enum Result {
        RESULT_IN_PROGRESS,
        RESULT_VICTORY,
        RESULT_DEFEAT
    }

    /**
     * –¢–∏–ø—ã —è—á–µ–µ–∫ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ —Å —É—á–µ—Ç–æ–º –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è.
     */
    private enum CellType {
        EMPTY,
        MINE,
        OPEN_EMPTY,
        CHECKED_EMPTY,
        CHECKED_MINE
    }

    /**
     * –¢–µ–∫—Å—Ç "üí£" –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ú–∏–Ω—ã –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.
     */
    private final String MINE_TXT = "\uD83D\uDCA3";
    /**
     * –¢–µ–∫—Å—Ç "üö©" –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –§–ª–∞–≥–∞ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.
     */
    private static final String FLAG = "\uD83D\uDEA9";
    /**
     * –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
     */
    private int size;
    /**
     * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (–≤–∏–¥–∏–º–æ–µ –ø–æ–ª–µ +1 –Ω–∞ –ø–æ–ª—è-–∑–æ–≥–æ–ª–æ–≤–∫–∏).
     */
    private final int MAX_SIZE = 25;
    /**
     * –°–º–µ—â–µ–Ω–∏–µ –º–µ–Ω—é –æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è, –¥–ª—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è "–ø–æ —Ü–µ–Ω—Ç—Ä—É".
     */
    private int menu_y_offset = 11;
    /**
     * –†–∞–∑–º–µ—Ä –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞ —Å–≤–µ—Ä—Ö—É –∏ —Å–ª–µ–≤–∞ –¥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
     */
    private int area_offset = 0;
    /**
     * –ß–∏—Å–ª–æ –º–∏–Ω –≤ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ.
     */
    private int mine_count;
    /**
     * –ß–∏—Å–ª–æ –º–µ—Ç–æ–∫ "–ú–∏–Ω–∞" –Ω–∞ —Ç–µ–∫—É—â–µ–º –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.
     */
    private int mine_checked_count;
    /**
     * –ß–∏—Å–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∏–Ω.
     */
    private int mine_find_count;
    /**
     * –ß–∏—Å–ª–æ —É–¥–∞—á–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫, —Ç—Ä–µ–±—É–µ–º–æ–µ –¥–ª—è –ü–æ–±–µ–¥—ã.
     */
    private int need_open_empty;
    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã:
     * 0 - –ò–¥–µ—Ç –∏–≥—Ä–∞,
     * 1 - –ü–æ–±–µ–¥–∞,
     * 2 - –ü–æ—Ä–∞–∂–µ–Ω–∏–µ.
     */
    private Result game_result = Result.RESULT_IN_PROGRESS;
    /**
     * –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤—Å–µ—Ö —è—á–µ–µ–∫ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
     */
    private CellType[][] area;
    /**
     * –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∏–≥—Ä—ã (–º–µ–Ω—é, –∏–≥—Ä–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã).
     */
    private Mode mode = Mode.GAME_NEW;
    /**
     * –í—ã–±—Ä–∞–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã.
     */
    private int complexity = 0;
    /**
     * –¢–µ–∫—É—â–∏–µ –Ω–∞–±—Ä–∞–Ω–Ω—ã–µ –æ—á–∫–∏, –Ω–µ –±–æ–ª–µ–µ 9999.
     */
    private double points = 0.0d;
    /**
     * –ë–∞–∑–æ–≤–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤ ~= 9999/600,
     * 9999 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ—á–∫–æ–≤,
     * 600 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫.
     */
    private double base_points = 16.5d;

    /**
     * –í—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ –≤ –∏–≥—Ä—É, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ Game.
     */
    @Override
    public void initialize() {
        showGrid(true);
        setScreenSize(MAX_SIZE + 1, MAX_SIZE + 1);
        mode_switch();
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∂–∏–º–æ–≤ –∏–≥—Ä—ã.
     * GAME_NEW - –Ω–æ–≤–∞—è –∏–≥—Ä–∞.
     * GAME_MENU_SIZE - –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
     * GAME_MENU_COMPL - –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
     * GAME_MAIN_FORM - –∏–≥—Ä–∞ —Å –∏–≥—Ä–æ–≤—ã–º –ø–æ–ª–µ–º –∏ –º–∏–Ω–∞–º–∏.
     * GAME_BLOCKED - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –∏–ª–∏ –ø–æ–±–µ–¥—ã.
     */
    private void mode_switch() {
        switch (mode) {
            case GAME_NEW:
                open_menu_size();
                break;
            case GAME_MENU_SIZE:
                open_menu_difficalty();
                break;
            case GAME_MENU_COMPL:
                minesweeper_init();
                break;
            case GAME_MAIN_FORM:
                mode = Mode.GAME_BLOCKED;
                break;
            case GAME_BLOCKED:
                show_final_message();
                break;
        }
    }

    /**
     * –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—è.
     */
    private void open_menu_size() {
        mode = Mode.GAME_MENU_SIZE;
        clear_screen();
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏–≥—Ä—ã.
        String[] sizes = {"10X10", "15X15", "20X20", "25X25"};
        for (int i = 0; i < sizes.length; i++) {
            // –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ–Ω—é –∏–∑ 10 —Å–∏–º–≤–æ–ª–æ–≤.
            String text_menu = "–ò–ì–†–ê " + sizes[i];
            one_menu_to_screen(8, menu_y_offset + i, text_menu);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –º–µ–Ω—é.
     */
    private void one_menu_to_screen(int menu_x, int menu_y, String text_menu) {
        Color menu_color;
        if (menu_y % 2 == 0) menu_color = Color.ANTIQUEWHITE;
        else menu_color = Color.LIGHTPINK;
        for (int k = 0; k < text_menu.length(); k++) {
            setCellValueEx(menu_x + k, menu_y, menu_color, text_menu.substring(k, k + 1), Color.BROWN, 80);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã.
     */
    private void open_menu_difficalty() {
        mode = Mode.GAME_MENU_COMPL;
        clear_screen();
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã.
        String[] compl = {"–õ–ï–ì–ö–û ", "–°–†–ï–î–ù–ï", "–°–õ–û–ñ–ù–û", "–°–ê–ü–ï–†!"};
        for (int i = 0; i < compl.length; i++) {
            one_menu_to_screen(10, menu_y_offset + i, compl[i]);
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã –∏ –µ–µ –æ–±—ä–µ–∫—Ç–æ–≤.
     */
    private void minesweeper_init() {
        System.out.println("Minesweeper_init() start...");
        mode = Mode.GAME_MAIN_FORM;
        area = new CellType[size][size];
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–¥—Ä–µ—Å–Ω—ã–µ —è—á–µ–π–∫–∏.
        for (int m = 0; m < size; m++) {
            setCellValueEx(area_offset, 1 + m + area_offset, Color.LIGHTCYAN,
                    String.valueOf(m + 1), Color.BLACK, 60);
            setCellValueEx(1 + m + area_offset, area_offset, Color.LIGHTCYAN,
                    String.valueOf(m + 1), Color.BLACK, 60);
        }
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã.
        mine_checked_count = 0;
        mine_find_count = 0;
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫, –¥–ª—è –ü–æ–±–µ–¥—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –∏—Ö –≤—Å–µ.
        need_open_empty = size * size - mine_count;
        game_result = Result.RESULT_IN_PROGRESS;
        points = 0;
        // –ë–∞–∑–æ–≤–æ–µ —á–∏—Å–ª–æ –æ—á–∫–æ–≤, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —É–¥–∞—á–Ω–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—É—Å—Ç–æ–π —è—á–µ–π–∫–∏, —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º.
        base_points = 16.5d;
        setScore(get_int_points());
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º–∏ —è—á–µ–π–∫–∞–º–∏ (–±–µ–∑ –º–∏–Ω).
        for (int i = 0; i < size; i++) {
            for (int k = 0; k < size; k++) {
                area[i][k] = CellType.EMPTY;
            }
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω.
        int mine_installed = mine_count;
        while (mine_installed > 0) {
            int mine_x = (int) Math.round(Math.random() * (size - 1));
            int mine_y = (int) Math.round(Math.random() * (size - 1));
            if (area[mine_x][mine_y] == CellType.EMPTY) {
                area[mine_x][mine_y] = CellType.MINE;
                mine_installed--;
            }
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ —è—á–µ–π–∫–∏ size*size.
        for (int i = 0; i < size; i++) {
            for (int k = 0; k < size; k++) {
                show_cell(i, k);
            }
        }
        // –î–ª—è –ª–µ–≥–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —á–∏—Å–ª–æ –º–∏–Ω, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä–∞—à–∏–≤–∞–µ–º.
        show_count_mines();

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ —Å–Ω–∏–∂–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ—á–∫–æ–≤ (ScorePoints).
        setTurnTimer(5000);
        // –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞–±–æ—Ç–∞ –º—ã—à—å—é.
        mode = Mode.GAME_MAIN_FORM;
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —è—á–µ–π–∫–∏ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.
    private int show_cell(int x, int y) {
        CellType cell_type = area[x][y];
        Color show_color;
        String show_type = "";
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–Ω–∏—Ö –º–∏–Ω –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ.
        int find_mines = -1;
        if (cell_type == CellType.OPEN_EMPTY) {
            // –û—Ç–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ.
            show_color = Color.ANTIQUEWHITE;
            find_mines = calc_mines(x, y);
            if (find_mines > 0)
                show_type = String.valueOf(find_mines);
            else
                show_type = "";
        } else {
            // –ó–∞–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ
            show_color = Color.LIGHTBLUE;
        }
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç–∫–∏ –Ω–∞ –ú–∏–Ω–∞—Ö.
        if (cell_type == CellType.CHECKED_MINE || cell_type == CellType.CHECKED_EMPTY)
            show_type = MINE_TXT;
        int offset = 1 + area_offset;
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è—á–µ–π–∫–∏.
        setCellValueEx(x + offset, y + offset, show_color, show_type, Color.BROWN, 60);
        return find_mines;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∏–Ω.
    private void show_count_mines() {
        setCellValueEx(area_offset, area_offset, Color.AQUAMARINE,
                String.valueOf(mine_count - mine_checked_count), Color.RED, 50);
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –æ–∫–æ–ª–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏.
     */
    private int calc_mines(int x, int y) {
        int left_x = Math.max(0, x - 1);
        int right_y = Math.min(size - 1, x + 1);
        int top_y = Math.max(0, y - 1);
        int bottom_y = Math.min(size - 1, y + 1);
        int mines_lookup = 0;
        for (int i = left_x; i <= right_y; i++) {
            for (int k = top_y; k <= bottom_y; k++) {
                CellType check_type = area[i][k];
                if (check_type == CellType.MINE || check_type == CellType.CHECKED_MINE)
                    mines_lookup++;
            }
        }
        return mines_lookup;
    }

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ–º —è—á–µ–π–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –ú–∏–Ω–∞, —Ç–æ –ø—Ä–æ–∏–≥—Ä—ã—à—å –∏ –∏–≥—Ä–∞ –¥–µ–ª–∞–µ—Ç —Ä–µ—Å—Ç–∞—Ä—Ç.
     * –ò–Ω–∞—á–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–Ω–∏—Ö –ú–∏–Ω.
     */
    @Override
    public void onMouseLeftClick(int x, int y) {
        switch (mode) {
            case GAME_NEW:
                // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–µ–∂–∏–º—É –∏–≥—Ä—ã.
                mode_switch();
                break;
            case GAME_MENU_SIZE:
                if (y >= menu_y_offset && y <= menu_y_offset + 3) {
                    // –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –æ—Ç 10 –¥–æ 25.
                    int size_menu_number = y - menu_y_offset;
                    size = 10 + 5 * size_menu_number;
                    // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç –∫—Ä–∞—è
                    area_offset = (MAX_SIZE - size) / 2;
                    mode_switch();
                }
                break;
            case GAME_MENU_COMPL:
                if (y >= menu_y_offset && y <= menu_y_offset + 3) {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã –æ—Ç 0 –¥–æ 3.
                    complexity = y - menu_y_offset;
                    mine_count = size * size / (8 - complexity) - 1;
                    mode_switch();
                }
                break;
            case GAME_MAIN_FORM:
                int cell_x = x - 1 - area_offset;
                int cell_y = y - 1 - area_offset;
                if (cell_x < 0 || cell_x >= size || cell_y < 0 || cell_y >= size) return;
                CellType cell_type = area[cell_x][cell_y];
                if (cell_type == CellType.EMPTY) {
                    area[cell_x][cell_y] = CellType.OPEN_EMPTY;
                    open_by_empty(cell_x, cell_y);
                    show_count_mines();
                    // –û—Ç–∫—Ä—ã–ª–∏ –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É, –¥–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏!
                    add_points();
                } else if (cell_type == CellType.MINE) {
                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É.
                    mode = Mode.GAME_BLOCKED;
                    game_result = Result.RESULT_DEFEAT;
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∑–æ—Ä–≤–∞–Ω–Ω—É—é –º–∏–Ω—É.
                    setCellValueEx(x, y, Color.RED, MINE_TXT, Color.BLACK, 60);
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –º–∏–Ω, –µ—Å–ª–∏ –µ—Å—Ç—å.
                    for (int i = 0; i < size; i++) {
                        for (int k = 0; k < size; k++) {
                            if (area[i][k] == CellType.CHECKED_EMPTY) {
                                setCellValueEx(i + 1 + area_offset, k + 1 + area_offset,
                                        Color.RED, MINE_TXT, Color.BLUE, 60);
                            }
                        }
                    }
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–∫–Ω–∞ "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!".
                    setTurnTimer(3000);
                }
                break;
        }
    }

    /**
     * –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –ü–æ–±–µ–¥—ã, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Ç–æ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.
     */
    private void check_victory() {
        if (mine_find_count >= mine_count && need_open_empty <= 0) {
            // –ü–æ–±–µ–¥–∞! –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É.
            mode = Mode.GAME_BLOCKED;
            game_result = Result.RESULT_VICTORY;
            // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–∫–Ω–∞ "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!".
            setTurnTimer(2000);
        }
    }

    /**
     * –¢–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã –∏–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏—è.
     */
    @Override
    public void onTurn(int step) {
        if (game_result == Result.RESULT_IN_PROGRESS) {
            // –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ —É–º–µ–Ω—å—à–∞–µ–º –±–∞–∑–æ–≤–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤—ã–¥–∞—á–∏ –Ω–æ–≤—ã—Ö –æ—á–∫–æ–≤.
            base_points = base_points * 99.0d / 100.0d;
        } else {
            stopTurnTimer();
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–∫–Ω–æ "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!" –∏–ª–∏ "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!".
            mode_switch();
        }
    }

    /**
     * –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–µ–∫.
     * –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è –∏ —á–∏—Å–ª–æ —Å–æ—Å–µ–¥–Ω–∏—Ö –º–∏–Ω = 0,
     * —Ç–æ —Å–æ—Å–µ–¥–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Ç–æ–∂–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è.
     *
     * @param x,y - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ area (0, size-1)
     */
    private void open_by_empty(int x, int y) {
        if (show_cell(x, y) != 0) return;
        int left_x = Math.max(0, x - 1);
        int right_x = Math.min(size - 1, x + 1);
        int top_y = Math.max(0, y - 1);
        int bottom_y = Math.min(size - 1, y + 1);
        for (int i = left_x; i <= right_x; i++) {
            for (int k = top_y; k <= bottom_y; k++) {
                CellType check_type = area[i][k];
                if (check_type == CellType.CHECKED_MINE) {
                    // –õ–æ–≥–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.
                    System.out.println("Error: empty expected, mine detected X=" + i + " Y=" + k);
                } else if (check_type == CellType.CHECKED_EMPTY) {
                    // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–Ω–∏–º–∞–µ–º –æ—à–∏–±–æ—á–Ω—É—é –º–µ—Ç–∫—É –ú–∏–Ω—ã.
                    add_points();
                    mine_checked_count--;
                    area[i][k] = CellType.OPEN_EMPTY;
                    open_by_empty(i, k);
                } else if (check_type == CellType.EMPTY) {
                    area[i][k] = CellType.OPEN_EMPTY;
                    add_points();
                    open_by_empty(i, k);
                }
            }
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ü–æ–±–µ–¥–µ –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ.
     */
    private void show_final_message() {
        // –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≥–æ—Ç–æ–≤–∏–º—Å—è –∫ —Ä–µ—Å—Ç–∞—Ä—Ç—É.
        mode = Mode.GAME_NEW;
        clear_screen();
        int message_y = (MAX_SIZE + 1) / 2 - 2;
        if (game_result == Result.RESULT_VICTORY)
            one_menu_to_screen(5, message_y, "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!   ");
        else {
            one_menu_to_screen(5, message_y, "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!  ");
            // –ü—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ–ª–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—á–∫–∏ –Ω–∞ 2.
            points = points / 2.0d;
            setScore(get_int_points());
        }
        String current_points = String.valueOf(get_int_points());
        while (current_points.length() < 4) current_points = " " + current_points;
        one_menu_to_screen(5, message_y + 2, "–í–∞—à–∏ –æ—á–∫–∏: " + current_points);
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –æ—á–∫–∏ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—É—Å—Ç–æ–π —è—á–µ–π–∫–∏.
     * –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã.
     */
    private void add_points() {
        need_open_empty--;
        points += base_points;
        setScore(get_int_points());
        check_victory();
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–≥—Ä–æ–≤—ã–µ –æ—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ INT.
     */
    private int get_int_points() {
        return (int) Math.round(points);
    }

    /**
     * –°—Ç–∞–≤–∏–º –∏–ª–∏ —É–±–∏—Ä–∞–µ–º –º–µ—Ç–∫—É –ú–∏–Ω—ã.
     * –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–ª—è—Ö, –Ω–µ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –º–µ—Ç–∫–æ–π "–ú–∏–Ω–∞".
     * –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ GAME_MAIN_FORM.
     */
    @Override
    public void onMouseRightClick(int x, int y) {
        if (mode != Mode.GAME_MAIN_FORM) return;
        // –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è, —Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
        if (x < 1 + area_offset) return;
        if (y < 1 + area_offset) return;
        // –ü—Ä–∏–≤–æ–¥–∏–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–∞—Å—Å–∏–≤–∞ —è—á–µ–µ–∫ area[][].
        x -= 1 + area_offset;
        y -= 1 + area_offset;
        switch (area[x][y]) {
            case EMPTY:
                // –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞, —Å—Ç–∞–≤–∏–º "–æ—à–∏–±–æ—á–Ω—É—é" –º–µ—Ç–∫—É –º–∏–Ω—ã.
                if (mine_count > mine_checked_count) {
                    area[x][y] = CellType.CHECKED_EMPTY;
                    mine_checked_count++;
                }
                break;
            case MINE:
                // –Ø—á–µ–π–∫–∞-–º–∏–Ω–∞, —Å—Ç–∞–≤–∏–º "–ø—Ä–∞–≤–∏–ª—å–Ω—É—é" –º–µ—Ç–∫—É –º–∏–Ω—ã.
                if (mine_count > mine_checked_count) {
                    area[x][y] = CellType.CHECKED_MINE;
                    mine_checked_count++;
                    mine_find_count++;
                    check_victory();
                }
                break;
            case CHECKED_EMPTY:
                // –°–Ω–∏–º–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –º–∏–Ω—ã.
                area[x][y] = CellType.EMPTY;
                mine_checked_count--;
                break;
            case CHECKED_MINE:
                // –°–Ω–∏–º–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –º–∏–Ω—ã.
                area[x][y] = CellType.MINE;
                mine_checked_count--;
                mine_find_count--;
                break;
        }
        show_cell(x, y);
        show_count_mines();
    }

    /**
     * –ó–∞–∫—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ —á–µ—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º.
     */
    private void clear_screen() {
        for (int i = 0; i < MAX_SIZE + 1; i++) {
            for (int k = 0; k < MAX_SIZE + 1; k++) {
                setCellValueEx(i, k, Color.BLACK, "", Color.BLACK, 60);
            }
        }
    }
}
