package com.javarush.games.minesweeper;

import com.javarush.engine.cell.*;
import javafx.scene.text.Font;
import javafx.scene.text.Text;

public class Sapper extends Game {
    /**
     * –¢–µ–∫—Å—Ç "üí£" –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ú–∏–Ω—ã –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.
     */
    private final String MINE_TXT = "\uD83D\uDCA3";
    /**
     * –¢–µ–∫—Å—Ç "üö©" –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –§–ª–∞–≥–∞ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.
     */
    private static final String FLAG_TXT = "\uD83D\uDEA9";
    /**
     * –ù–∞—á–∞–ª—å–Ω—ã–π (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π) —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
     */
    private final int SIZE_FIRST = 10;
    /**
     * –®–∞–≥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
     */
    private final int SIZE_STEP = 5;
    /**
     * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (–≤–∏–¥–∏–º–æ–µ –ø–æ–ª–µ +1 –Ω–∞ –ø–æ–ª—è-–∑–∞–≥–æ–ª–æ–≤–∫–∏).
     */
    private final int MAX_SIZE = 10 + SIZE_STEP * 3;
    /**
     * –°–º–µ—â–µ–Ω–∏–µ –º–µ–Ω—é –æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è, –¥–ª—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è "–ø–æ —Ü–µ–Ω—Ç—Ä—É".
     */
    private final int MENU_Y_OFFSET = 11;
    /**
     * –¶–≤–µ—Ç –∞–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–∏–∂–Ω–µ–≥–æ –ø–æ–ª—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
     */
    private final Color FOOTER_COLOR = Color.BROWN;

    /**
     * –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
     */
    private int size;
    /**
     * –†–∞–∑–º–µ—Ä –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞ —Å–≤–µ—Ä—Ö—É –∏ —Å–ª–µ–≤–∞ –¥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
     */
    private int area_offset = 0;
    /**
     * –ß–∏—Å–ª–æ –º–∏–Ω –≤ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ.
     */
    private int mine_count;
    /**
     * –ß–∏—Å–ª–æ —É–¥–∞—á–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫, —Ç—Ä–µ–±—É–µ–º–æ–µ –¥–ª—è –ü–æ–±–µ–¥—ã.
     */
    private int need_open_mines;
    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã:
     * 0 - –ò–¥–µ—Ç –∏–≥—Ä–∞,
     * 1 - –ü–æ–±–µ–¥–∞,
     * 2 - –ü–æ—Ä–∞–∂–µ–Ω–∏–µ.
     */
    private Result game_result = Result.RESULT_IN_PROGRESS;
    /**
     * –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (—è—á–µ–µ–∫) –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
     */
    private CellObject[][] area;
    /**
     * –í—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
     */
    private final int[] sizes = {10, 10 + SIZE_STEP, 10 + SIZE_STEP * 2, 10 + SIZE_STEP * 3};
    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã.
     */
    private String[] complexity_levels = {"–õ–ï–ì–ö–û ", "–°–†–ï–î–ù–ï", "–°–õ–û–ñ–ù–û", "–°–ê–ü–ï–†!"};
    /**
     * –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∏–≥—Ä—ã (–º–µ–Ω—é, –∏–≥—Ä–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã).
     */
    private Mode mode = Mode.GAME_NEW;
    /**
     * –í—ã–±—Ä–∞–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã.
     */
    private int complexity = 0;
    /**
     * –¢–µ–∫—É—â–∏–µ –Ω–∞–±—Ä–∞–Ω–Ω—ã–µ –æ—á–∫–∏, –Ω–µ –±–æ–ª–µ–µ 9999.
     */
    private double scorePoints = 0.0d;
    /**
     * –ë–∞–∑–æ–≤–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤ ~= 9999/600*2,
     * 9999 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ—á–∫–æ–≤,
     * 600 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫.
     * 2 - —Å—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–º–µ–Ω—å—à–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ —á–∏—Å–ª–∞ –∑–∞ –∏–≥—Ä—É.
     */
    private double base_points = 33.0d;
    /**
     * –ü—Ä–∏–∑–Ω–∞–∫ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é.
     */
    private boolean is_first_open = true;
    /**
     * –ü–æ–ª–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å—Ç–æ–∏—Ç –∫—É—Ä—Å–æ—Ä –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
     */
    private CellObject cursor;

    /**
     * –í—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ –≤ –∏–≥—Ä—É, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ Game.
     */
    @Override
    public void initialize() {
        showGrid(true);
        setScreenSize(MAX_SIZE + 1, MAX_SIZE + 2);
        size = sizes[0];
        mode_switch();
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∂–∏–º–æ–≤ –∏–≥—Ä—ã.
     * GAME_NEW - –Ω–æ–≤–∞—è –∏–≥—Ä–∞.
     * GAME_MENU_SIZE - –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
     * GAME_MENU_COMPL - –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
     * GAME_MAIN_FORM - –∏–≥—Ä–∞ —Å –∏–≥—Ä–æ–≤—ã–º –ø–æ–ª–µ–º –∏ –º–∏–Ω–∞–º–∏.
     * GAME_BLOCKED - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –∏–ª–∏ –ø–æ–±–µ–¥—ã.
     */
    private void mode_switch() {
        switch (mode) {
            case GAME_NEW:
            case GAME_TEST_COLOR:
            case GAME_BLOCKED:
                stopTurnTimer();
                open_menu_size();
                break;
            case GAME_MENU_SIZE:
                open_menu_difficulty();
                break;
            case GAME_MENU_COMPL:
                minesweeper_init();
                break;
            case GAME_MAIN_FORM:
                mode = Mode.GAME_BLOCKED;
                break;
        }
    }

    /**
     * –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—è.
     */
    private void open_menu_size() {
        if (mode != Mode.GAME_MENU_SIZE) {
            mode = Mode.GAME_MENU_SIZE;
            clear_screen();
            show_footer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–≥—Ä—ã", FOOTER_COLOR);
        }
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏–≥—Ä—ã.
        int menu_x = (getScreenWidth() - " 15x15 ".length()) / 2;
        for (int i = 0; i < sizes.length; i++) {
            int curr_size = sizes[i];
            // –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ–Ω—é –∏–∑ 10 —Å–∏–º–≤–æ–ª–æ–≤.
            String text_menu = " " + curr_size + "x" + curr_size + " ";
            one_menu_to_screen(menu_x, MENU_Y_OFFSET + i, text_menu, size == curr_size);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –º–µ–Ω—é.
     */
    private void one_menu_to_screen(int menu_x, int menu_y, String text_menu, boolean selected) {
        if (menu_y >= getScreenHeight()) return;
        int screen_width = getScreenWidth();
        Color menu_color;
        if (selected) menu_color = Color.ANTIQUEWHITE;
        else menu_color = Color.LIGHTBLUE;
        for (int k = 0; k < text_menu.length(); k++) {
            if (menu_x + k < screen_width)
                setCellValueEx(menu_x + k, menu_y, menu_color, text_menu.substring(k, k + 1), Color.BROWN, 80);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã.
     */
    private void open_menu_difficulty() {
        if (mode != Mode.GAME_MENU_COMPL) {
            mode = Mode.GAME_MENU_COMPL;
            clear_screen();
            show_footer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä—ã", FOOTER_COLOR);
        }
        for (int i = 0; i < complexity_levels.length; i++) {
            one_menu_to_screen(10, MENU_Y_OFFSET + i, complexity_levels[i], complexity == i);
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã –∏ –µ–µ –æ–±—ä–µ–∫—Ç–æ–≤.
     */
    private void minesweeper_init() {
        mode = Mode.GAME_MAIN_FORM;
        is_first_open = true;
        cursor = null;
        area = new CellObject[size][size];
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–¥—Ä–µ—Å–Ω—ã–µ —è—á–µ–π–∫–∏.
        for (int m = 0; m < size; m++) {
            setCellValueEx(area_offset - 1, m + area_offset, Color.LIGHTCYAN,
                    String.valueOf(m + 1), Color.BLACK, 60);
            setCellValueEx(m + area_offset, area_offset - 1, Color.LIGHTCYAN,
                    String.valueOf(m + 1), Color.BLACK, 60);
        }
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã.
        CellObject.initFlagsCount();
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫, –¥–ª—è –ü–æ–±–µ–¥—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –∏—Ö –≤—Å–µ.
        need_open_mines = size * size - mine_count;
        game_result = Result.RESULT_IN_PROGRESS;
        scorePoints = 0;
        // –ë–∞–∑–æ–≤–æ–µ —á–∏—Å–ª–æ –æ—á–∫–æ–≤, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —É–¥–∞—á–Ω–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—É—Å—Ç–æ–π —è—á–µ–π–∫–∏, —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º.
        base_points = 33.0d;
        setScore(get_int_points());
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º–∏ —è—á–µ–π–∫–∞–º–∏ (–±–µ–∑ –º–∏–Ω –∏ —Ñ–ª–∞–≥–æ–≤).
        for (int i = 0; i < size; i++) {
            for (int k = 0; k < size; k++) {
                CellObject obj = new CellObject(i, k);
                area[i][k] = obj;
            }
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω.
        minesInstall(mine_count);

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ —è—á–µ–π–∫–∏ size*size.
        for (int i = 0; i < size; i++) {
            for (int k = 0; k < size; k++) {
                showCell(area[i][k]);
            }
        }
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —á–∏—Å–ª–æ –º–∏–Ω.
        show_count_need_to_open();

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —Å–Ω–∏–∂–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ—á–∫–æ–≤ (ScorePoints) –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É.
        setTurnTimer(1000);
        // –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞–±–æ—Ç–∞ –º—ã—à—å—é.
        mode = Mode.GAME_MAIN_FORM;
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω.
     */
    private void minesInstall(int mine_installed) {
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞.
        int limit = size * size * 5;
        while (mine_installed > 0 && limit > 0) {
            int mine_x = (int) Math.round(Math.random() * (size - 1));
            int mine_y = (int) Math.round(Math.random() * (size - 1));
            CellObject obj = area[mine_x][mine_y];
            if (!obj.isMine && !obj.isOpen) {
                obj.isMine = true;
                mine_installed--;
            }
            limit--;
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —è—á–µ–π–∫–∏ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.
    private void showCell(CellObject obj) {
        Color show_color;
        String show_type = "";
        if (obj.isOpen) {
            // –û—Ç–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ.
            if (obj.isCursor)
                show_color = Color.TAN;
            else
                show_color = Color.ANTIQUEWHITE;
            if (obj.countMineNeighbors > 0)
                show_type = String.valueOf(obj.countMineNeighbors);
        } else {
            // –ó–∞–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ
            if (obj.isCursor) show_color = Color.DEEPSKYBLUE;
            else show_color = Color.LIGHTBLUE;
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç–∫–∏ –Ω–∞ –ú–∏–Ω–∞—Ö.
            if (obj.getIsFlag())
                show_type = FLAG_TXT;
        }
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è—á–µ–π–∫–∏.
        setCellValueEx(obj.x + area_offset, obj.y + area_offset, show_color, show_type, Color.BROWN, 60);
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫.
     */
    private void show_count_need_to_open() {
        if (game_result == Result.RESULT_IN_PROGRESS)
            show_footer("–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å: " + need_open_mines, FOOTER_COLOR);
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –æ–∫–æ–ª–æ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏ –¥–ª—è –≤—Å–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
     */
    private void calc_mines() {
        for (int x = 0; x < size; x++) {
            for (int y = 0; y < size; y++) {
                CellObject obj = area[x][y];

                int left_x = Math.max(0, x - 1);
                int right_y = Math.min(size - 1, x + 1);
                int top_y = Math.max(0, y - 1);
                int bottom_y = Math.min(size - 1, y + 1);
                int mines_lookup = 0;
                for (int i = left_x; i <= right_y; i++) {
                    for (int k = top_y; k <= bottom_y; k++) {
                        CellObject lookup_obj = area[i][k];
                        if (lookup_obj.isMine)
                            mines_lookup++;
                    }
                }
                obj.countMineNeighbors = mines_lookup;
            }
        }
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –º–∏–Ω –¥–ª—è –≤—Å–µ —è—á–µ–µ–∫ –æ–∫–æ–ª–æ –∑–∞–¥–∞–Ω–Ω–æ–π.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π.
     */
    private void calc_flag_mines(CellObject mine_obj) {
        int left_x = Math.max(0, mine_obj.x - 1);
        int right_y = Math.min(size - 1, mine_obj.x + 1);
        int top_y = Math.max(0, mine_obj.y - 1);
        int bottom_y = Math.min(size - 1, mine_obj.y + 1);
        for (int i = left_x; i <= right_y; i++) {
            for (int k = top_y; k <= bottom_y; k++) {
                CellObject lookup_obj = area[i][k];
                if (lookup_obj != mine_obj)
                    calc_flag_mines_by_one(lookup_obj);
            }
        }
    }

    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –º–∏–Ω –¥–ª—è –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏.
     */
    private void calc_flag_mines_by_one(CellObject obj) {
        if (obj.isMine) return;

        int left_x = Math.max(0, obj.x - 1);
        int right_y = Math.min(size - 1, obj.x + 1);
        int top_y = Math.max(0, obj.y - 1);
        int bottom_y = Math.min(size - 1, obj.y + 1);
        int flags_mine_count = 0;
        for (int i = left_x; i <= right_y; i++) {
            for (int k = top_y; k <= bottom_y; k++) {
                CellObject lookup_obj = area[i][k];
                if (lookup_obj.isMine && lookup_obj.getIsFlag())
                    flags_mine_count++;
            }
        }
        obj.countFlagsMine = flags_mine_count;
    }

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ–º —è—á–µ–π–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –ú–∏–Ω–∞, —Ç–æ –ø—Ä–æ–∏–≥—Ä—ã—à—å –∏ –∏–≥—Ä–∞ –¥–µ–ª–∞–µ—Ç —Ä–µ—Å—Ç–∞—Ä—Ç.
     * –ò–Ω–∞—á–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–Ω–∏—Ö –ú–∏–Ω.
     */
    @Override
    public void onMouseLeftClick(int x, int y) {
        switch (mode) {
            case GAME_NEW:
                // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–µ–∂–∏–º—É –∏–≥—Ä—ã.
                mode_switch();
                break;
            case GAME_MENU_SIZE:
                if (y >= MENU_Y_OFFSET && y <= MENU_Y_OFFSET + 3) {
                    // –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –æ—Ç 10(0) –¥–æ 25(3).
                    setMenuSize(SIZE_FIRST + SIZE_STEP * (y - MENU_Y_OFFSET));
                }
                break;
            case GAME_MENU_COMPL:
                if (y >= MENU_Y_OFFSET && y <= MENU_Y_OFFSET + 3) {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã –æ—Ç 0 –¥–æ 3.
                    setMenuComplexity(y - MENU_Y_OFFSET);
                }
                break;
            case GAME_MAIN_FORM:
                int cell_x = x - area_offset;
                int cell_y = y - area_offset;
                if (cell_x < 0 || cell_x >= size || cell_y < 0 || cell_y >= size) return;
                setOpen(area[cell_x][cell_y]);
                break;
            case GAME_TEST_COLOR:
                Color color = getCellColor(x, y);
                String color_text = color.ordinal() + " " + color.toString();
                System.out.println(color_text);
                show_footer(color_text, FOOTER_COLOR);
                break;
            default:
                mode_switch();
                break;
        }
    }

    private void setOpen(CellObject open_obj) {
        if (is_first_open) {
            is_first_open = false;
            if (open_obj.isMine) {
                {
                    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫ –∏ –ø–æ–ø–∞–ª–∏ –Ω–∞ –º–∏–Ω—É, —Ç–æ —É–±–∏—Ä–∞–µ–º –µ–µ –≤ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ.
                    minesInstall(1);
                    open_obj.isMine = false;
                }
            }
            // –í—ã—á–∏—Å–ª—è–µ–º —á–∏—Å–ª–æ —Å–æ—Å–µ–¥–Ω–∏—Ö –º–∏–Ω –¥–ª—è –≤—Å–µ—Ö –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π.
            calc_mines();
        }
        if (!open_obj.isOpen) {
            if (open_obj.isMine) {
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É.
                mode = Mode.GAME_BLOCKED;
                game_result = Result.RESULT_DEFEAT;
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∑–æ—Ä–≤–∞–Ω–Ω—É—é –º–∏–Ω—É.
                setCellValueEx(open_obj.x + area_offset, open_obj.y + area_offset,
                    Color.RED, MINE_TXT, Color.BLACK, 60);
                for (int i = 0; i < size; i++) {
                    for (int k = 0; k < size; k++) {
                        CellObject test_obj = area[i][k];
                        if (test_obj.getIsFlag() && !test_obj.isMine) {
                            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –º–∏–Ω, –µ—Å–ª–∏ –µ—Å—Ç—å.
                            setCellValueEx(i + area_offset, k + area_offset,
                                    Color.LIGHTBLUE, "X", Color.DARKRED, 60);
                        } else if (test_obj.isMine && !test_obj.getIsFlag() && !test_obj.equals(open_obj)) {
                            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∏–Ω—ã.
                            setCellValueEx(i + area_offset, k + area_offset,
                                    Color.LIGHTBLUE, MINE_TXT, Color.DARKRED, 60);
                        }
                    }
                }
                show_footer("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!", Color.DARKRED);
                // –ü—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ–ª–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—á–∫–∏ –Ω–∞ 2.
                scorePoints = scorePoints / 2.0d;
                setScore(get_int_points());
            } else {
                open_by_empty(open_obj);
                show_count_need_to_open();
            }
        }
    }

    /**
     * –ò–∑–º–µ–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã –æ—Ç 0 –¥–æ 3.
     */
    private void setMenuComplexity(int new_complexity) {
        complexity = new_complexity;
        // –í—ã—á–∏—Å–ª—è–µ–º —á–∏—Å–ª–æ –º–∏–Ω –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã.
        mine_count = size * size / (10 - complexity);
        mode_switch();
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
     */
    private void setMenuSize(int new_size) {
        size = new_size;
        // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç –∫—Ä–∞—è —Å—Ü–µ–Ω—ã.
        area_offset = (MAX_SIZE - size) / 2 + 1;
        mode_switch();
    }

    /**
     * –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –ü–æ–±–µ–¥—ã, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Ç–æ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.
     */
    private void check_victory() {
        if (need_open_mines <= 0) {
            // –ü–æ–±–µ–¥–∞! –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É.
            mode = Mode.GAME_BLOCKED;
            game_result = Result.RESULT_VICTORY;
            show_footer("–í—ã  –ø–æ–±–µ–¥–∏–ª–∏!", Color.DARKGREEN);
        }
    }

    /**
     * –¢–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã –∏–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏—è.
     */
    @Override
    public void onTurn(int step) {
        if (mode != Mode.GAME_MAIN_FORM) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ç–∞–π–º–µ—Ä.
            stopTurnTimer();
            return;
        }
        if (game_result == Result.RESULT_IN_PROGRESS && mode == Mode.GAME_MAIN_FORM && !is_first_open) {
            // –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É —É–º–µ–Ω—å—à–∞–µ–º –±–∞–∑–æ–≤–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤—ã–¥–∞—á–∏ –Ω–æ–≤—ã—Ö –æ—á–∫–æ–≤.
            updateBaseIndex((size - 10) / SIZE_STEP);
        }
        setCellValueEx(area_offset - 1, area_offset - 1, Color.BLACK,
                String.valueOf(Math.round(base_points)), Color.WHITE, 60);
    }

    /**
     * –£–º–µ–Ω—å—à–∞–µ—Ç –±–∞–∑–æ–≤–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤—ã–¥–∞—á–∏ –Ω–æ–≤—ã—Ö –æ—á–∫–æ–≤ –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–µ–π.
     */
    private void updateBaseIndex(int size_index) {
        if (base_points > 3) base_points -= 0.2d * (4 - size_index);
        else base_points *= (96.5d + 1.0d * size_index) / 100.0d;
    }

    /**
     * –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–µ–∫.
     * –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è –∏ —á–∏—Å–ª–æ —Å–æ—Å–µ–¥–Ω–∏—Ö –º–∏–Ω = 0,
     * —Ç–æ —Å–æ—Å–µ–¥–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Ç–æ–∂–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è.
     */
    private void open_by_empty(CellObject obj) {
        obj.isOpen = true;
        showCell(obj);
        // –û—Ç–∫—Ä—ã–ª–∏ –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É, –¥–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏!
        add_points();
        if (obj.countMineNeighbors - obj.countFlagsMine > 0) return;
        // –ï—Å–ª–∏ —á–∏—Å–ª–æ —Ä—è–¥–æ–º —Å—Ç–æ—è—â–∏—Ö –º–∏–Ω —Ä–∞–≤–Ω–æ –Ω—É–ª—é, —Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏.
        int left_x = Math.max(0, obj.x - 1);
        int right_x = Math.min(size - 1, obj.x + 1);
        int top_y = Math.max(0, obj.y - 1);
        int bottom_y = Math.min(size - 1, obj.y + 1);
        for (int i = left_x; i <= right_x; i++) {
            for (int k = top_y; k <= bottom_y; k++) {
                CellObject neighbor_obj = area[i][k];
                if (!neighbor_obj.isMine && !neighbor_obj.isOpen) {
                    if (neighbor_obj.getIsFlag() && !neighbor_obj.isMine) {
                        // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–Ω–∏–º–∞–µ–º –æ—à–∏–±–æ—á–Ω—É—é –º–µ—Ç–∫—É –ú–∏–Ω—ã.
                        neighbor_obj.setIsFlag(false);
                        calc_flag_mines(neighbor_obj);
                    }
                    // –í—Ö–æ–¥–∏–º –≤ —Ä–µ–∫—É—Ä—Å–∏—é.
                    open_by_empty(neighbor_obj);
                }
            }
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –æ—á–∫–∏ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—É—Å—Ç–æ–π —è—á–µ–π–∫–∏.
     * –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã.
     */
    private void add_points() {
        need_open_mines--;
        scorePoints += base_points;
        setScore(get_int_points());
        check_victory();
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–≥—Ä–æ–≤—ã–µ –æ—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ INT.
     */
    private int get_int_points() {
        return (int) Math.round(scorePoints);
    }

    /**
     * –°—Ç–∞–≤–∏–º –∏–ª–∏ —É–±–∏—Ä–∞–µ–º –º–µ—Ç–∫—É –ú–∏–Ω—ã.
     * –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–ª—è—Ö.
     * –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ GAME_MAIN_FORM.
     */
    @Override
    public void onMouseRightClick(int x, int y) {
        if (mode != Mode.GAME_MAIN_FORM) return;
        if (CellObject.getFlagsCount() >= mine_count) return;

        // –ü—Ä–∏–≤–æ–¥–∏–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–∞—Å—Å–∏–≤–∞ —è—á–µ–µ–∫ area[][].
        x -= area_offset;
        y -= area_offset;

        // –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è, —Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
        if (x < 0 || y < 0 || x >= size || y >= size) return;

        setFlag(area[x][y]);
    }

    private void setFlag(CellObject obj) {
        // –ï—Å–ª–∏ –ø–æ–ª–µ –æ—Ç–∫—Ä—ã—Ç–æ, —Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
        if (obj.isOpen) return;

        // –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ—Ç–∫–∏ —Å —Ñ–ª–∞–≥–æ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.
        obj.setIsFlag(!obj.getIsFlag());
        calc_flag_mines(obj);
        showCell(obj);
    }

    /**
     * –ó–∞–∫—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ —á–µ—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º.
     */
    private void clear_screen() {
        for (int i = 0; i < getScreenWidth(); i++) {
            for (int k = 0; k < getScreenHeight() - 1; k++) {
                setCellValueEx(i, k, Color.BLACK, "", Color.BLACK, 60);
            }
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–µ–∂–∏–º—É –ø–æ –±—ã—Å—Ç—Ä—ã–º –∫–Ω–æ–ø–∫–∞–º.
     */
    @Override
    public void onKeyPress(Key key) {
        if (key == Key.ESCAPE) {
            stopTurnTimer();
            open_menu_size();
            return;
        }
        if (key == Key.PAUSE) {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞–Ω–Ω–æ —Ü–≤–µ—Ç–æ–≤ JavaRush
            mode = Mode.GAME_TEST_COLOR;
            test_all_color();
            return;
        }
        switch (mode) {
            case GAME_BLOCKED:
            case GAME_NEW:
            case GAME_TEST_COLOR:
                mode_switch();
                break;
            case GAME_MENU_SIZE:
                if (key == Key.UP && size >= SIZE_FIRST + SIZE_STEP) {
                    size -= SIZE_STEP;
                    open_menu_size();
                } else if (key == Key.DOWN && size <= SIZE_FIRST + SIZE_STEP * 2) {
                    size += SIZE_STEP;
                    open_menu_size();
                } else if (key == Key.ENTER || key == Key.SPACE) {
                    setMenuSize(size);
                }
                break;
            case GAME_MENU_COMPL:
                if (key == Key.UP && complexity >= 1) {
                    complexity--;
                    open_menu_difficulty();
                } else if (key == Key.DOWN && complexity <= 2) {
                    complexity++;
                    open_menu_difficulty();
                } else if (key == Key.ENTER || key == Key.SPACE) {
                    setMenuComplexity(complexity);
                }
                break;
            case GAME_MAIN_FORM:
                if (game_result == Result.RESULT_IN_PROGRESS)
                    game_keyboard_control(key);
                break;
        }
    }

    private void game_keyboard_control(Key key) {
        if (cursor == null) {
            // –í—ã–±–∏—Ä–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –∫—É—Ä—Å–æ—Ä–∞.
            cursor = area[size / 2][size / 2];
        }
        CellObject old_cursor = cursor;
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∫—É—Ä—Å–æ—Ä, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–æ–≤ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ).
        if (key == Key.ENTER) {
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞.
            setFlag(cursor);
        } else if (key == Key.SPACE) {
            setOpen(cursor);
        } else if (key == Key.RIGHT) {
            if (cursor.x < size - 1) {
                cursor.isCursor = false;
                cursor = area[cursor.x + 1][cursor.y];
                cursor.isCursor = true;
            }
        } else if (key == Key.LEFT) {
            if (cursor.x > 0) {
                cursor.isCursor = false;
                cursor = area[cursor.x - 1][cursor.y];
                cursor.isCursor = true;
            }
        } else if (key == Key.UP) {
            if (cursor.y > 0) {
                cursor.isCursor = false;
                cursor = area[cursor.x][cursor.y - 1];
                cursor.isCursor = true;
            }
        } else if (key == Key.DOWN) {
            if (cursor.y < size - 1) {
                cursor.isCursor = false;
                cursor = area[cursor.x][cursor.y + 1];
                cursor.isCursor = true;
            }
        }
        showCell(old_cursor);
        showCell(cursor);
    }

    private void show_footer(String footer, Color footer_color) {
        int footer_length = footer.length();
        int footer_y = getScreenHeight() - 1;
        int footer_x = (getScreenWidth() - footer_length) / 2;
        if (footer_x < 0)
            footer_x = 0;
        for (int x = 0; x < getScreenWidth(); x++) {
            String symbol = "";
            if (x >= footer_x && x < footer_x + footer_length)
                symbol = String.valueOf(footer.charAt(x - footer_x));
            setCellValueEx(x, footer_y, footer_color, symbol, Color.YELLOW, 80);
        }
    }

    private void test_all_color() {
        int x = 0;
        int y = 0;
        for (Color color : Color.values()) {
            if (color.equals(Color.NONE)) continue;
            setCellColor(x, y, color);
            setCellColor(x + 1, y, color);
            setCellColor(x + 2, y, color);
            x += 3;
            if (x > getScreenWidth() - 3) {
                x = 0;
                y++;
                if (y > getScreenHeight() - 2) {
                    System.out.println("–ù–µ –≤–ª–µ–∑–ª–∏: " + color.ordinal());
                    break;
                }
            }
        }
    }
}
